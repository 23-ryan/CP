{"id":865581134,"lang":"cpp","lang_name":"C++","time":"1 week, 5 days","timestamp":1672033188,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/865581134/","is_pending":"Not Pending","title":"Add Two Numbers","memory":"71.4 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        int carry = 0;\n        int value = 0;\n        ListNode* ans = nullptr;\n        ListNode* ptr;\n        while(l1 != nullptr && l2 != nullptr){\n            value = (l1->val + l2->val + carry)%10;\n            carry = (l1->val + l2->val + carry)/10;\n            if(ans == nullptr){\n                ans = new ListNode(value);\n                ptr = ans;\n            }\n            else{\n                ans->next = new ListNode(value);\n                ans = ans->next;\n            }\n            l1 = l1->next;\n            l2 = l2->next;\n        }\n        while(l1 != nullptr){\n            value = (l1->val + carry)%10;\n            carry = (l1->val + carry)/10;\n            ans->next = new ListNode(value);\n            ans = ans->next;\n            l1 = l1->next;\n        }\n        while(l2 != nullptr){\n            value = (l2->val + carry)%10;\n            carry = (l2->val + carry)/10;\n            ans->next = new ListNode(value);\n            ans = ans->next;\n            l2 = l2->next;\n        }\n        if(carry != 0){\n            ans->next = new ListNode(carry);\n        }\n        return ptr;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"add-two-numbers","has_notes":false,"notes":"","topic_tags":[]}