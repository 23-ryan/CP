{"id":867848328,"lang":"cpp","lang_name":"C++","time":"1 week, 1 day","timestamp":1672370994,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/867848328/","is_pending":"Not Pending","title":"Merge Two Sorted Lists","memory":"15 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        ListNode* merged = nullptr;\n        ListNode* toRet = nullptr;\n        while(list1 != nullptr && list2 != nullptr){\n            if(list1->val <= list2->val){\n                if(merged == nullptr){\n                    merged = new ListNode(list1->val);\n                    toRet = merged;\n                }\n                else{\n                    merged->next = new ListNode(list1->val);\n                    merged = merged->next;\n                }\n                list1 = list1->next;\n            }\n            else if(list1->val > list2->val){\n                if(merged == nullptr){\n                    merged = new ListNode(list2->val);\n                    toRet = merged;\n                }\n                else{\n                    merged->next = new ListNode(list2->val);\n                    merged = merged->next;\n                }\n                list2 = list2->next;\n            }\n        }\n        while(list1 != nullptr){\n            if(merged == nullptr){\n                merged = new ListNode(list1->val);\n                toRet = merged;\n            }\n            else{\n                merged->next = new ListNode(list1->val);\n                merged = merged->next;\n            }\n            list1 = list1->next;\n        }\n        while(list2 != nullptr){\n            if(merged == nullptr){\n                merged = new ListNode(list2->val);\n                toRet = merged;\n            }\n            else{\n                merged->next = new ListNode(list2->val);\n                merged = merged->next;\n            }\n            list2= list2->next;\n        }\n\n        return toRet;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-two-sorted-lists","has_notes":false,"notes":"","topic_tags":[]}