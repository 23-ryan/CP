{"id":868058023,"lang":"cpp","lang_name":"C++","time":"1 week, 1 day","timestamp":1672404450,"status":10,"status_display":"Accepted","runtime":"772 ms","url":"/submissions/detail/868058023/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"13.7 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        int l = lists.size();\n        ListNode* merged =  nullptr;\n        ListNode* toRet;\n\n        bool run = true;\n        while(run){\n            run = false;\n            for(auto list : lists){\n                if(list != nullptr) {\n                    run = true;\n                    break;\n                }\n            }\n            int minElem = INT_MAX;\n            int minInd;\n            for(int i=0; i<l; i++){\n                if(lists[i] != nullptr && lists[i]->val < minElem){\n                    minElem = lists[i]->val;\n                    minInd = i;\n                }\n            }\n            if(minElem != INT_MAX){\n                if(merged == nullptr){\n                    merged = new ListNode(lists[minInd]->val);\n                    toRet = merged;\n                }\n                else{\n                    merged->next = new ListNode(lists[minInd]->val);\n                    merged = merged->next;\n                }\n                lists[minInd] = lists[minInd]->next;\n            }\n            else{\n                break;\n            }\n        }\n        return toRet;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists","has_notes":false,"notes":"","topic_tags":[]}