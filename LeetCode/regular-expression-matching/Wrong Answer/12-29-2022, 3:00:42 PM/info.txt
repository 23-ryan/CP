{"id":867423432,"lang":"cpp","lang_name":"C++","time":"1 week, 2 days","timestamp":1672306242,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/867423432/","is_pending":"Not Pending","title":"Regular Expression Matching","memory":"N/A","code":"class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        int lenP = p.length();\n        int lenS = s.length();\n        char prevChar = s[0];\n        int j = 0;\n        bool ans = true;\n        for(int i=0; i<lenP; i++){\n            if(p[i] == '.'){\n                prevChar = '.';\n                j++;\n            }\n            else if(p[i] == '*'){\n                if(prevChar == '.'){\n                    ans = true;\n                    i = lenP;\n                    j = lenS;\n                    break;\n                }\n                else{\n                    int c1=i+1, c2=j, count1=0, count2=0;\n                    while(c1 < lenP && p[c1] == prevChar){\n                        c1++;\n                        count1++;\n                    }\n                    while(s[c2] == prevChar){\n                        c2++;\n                        count2++;\n                    }\n                    if(count1 > count2){\n                        ans = false;\n                        i = lenP;\n                        j = lenS;\n                        break;\n                    }\n                    else{\n                        i = c1-1;\n                        j = c2;\n                    }\n                    \n                }\n            }\n            else{\n                if(s[j] != p[i]){\n                    ans = false;\n                    i = lenP;\n                    j = lenS;\n                    break;\n                }\n                else{\n                    prevChar = s[j];\n                    j++;\n                }\n            }\n        }\n        if(j != lenS) ans = false;\n        return ans;\n    }\n};","compare_result":"11101111110111111000111101110111011010111111111111111111111110111011110111111111111110111111111101111111111111111111111111111111111111110111111111011111011011001110100111111001101001101101111100111011011110111101110111110111110100010110110110110011011101001111110110000101111111011011111110111011111101111001111111111011011111110111010111010111111001011","title_slug":"regular-expression-matching","has_notes":false,"notes":"","topic_tags":[]}